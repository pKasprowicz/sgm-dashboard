{
  "name": "snyk-config",
  "description": "Config setup for snyk shared across projects",
  "main": "lib/index.js",
  "scripts": {
    "test": "node test/*.test.js --afoo --azoo='true' | tap-spec",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post"
  },
  "keywords": [
    "config"
  ],
  "author": {
    "name": "Remy Sharp"
  },
  "license": "Apache-2.0",
  "devDependencies": {
    "semantic-release": "^4.1.0",
    "tap-spec": "^2.2.2",
    "tape": "^4.0.1"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "nconf": "^0.7.2",
    "path-is-absolute": "^1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Snyk/config.git"
  },
  "version": "1.0.1",
  "readme": "# snyk-config\n\nLoads the configuration for your module.\n\n## Usage\n\nAlthough you can require this module directly, it's recommended you create your own `config.js` file that can be cached by the require system and called *without* a path:\n\n```js\n// config.js\nmodule.exports = require('@snyk/config')('<directory with config files>');\n\n// in app.js\nvar config = require('./config');\n\n// in foo.js\nvar config = require('./config'); // matches config in app.js\n```\n\n## Method\n\nThe config loader will look for the following values in order of priority, specifically, if a property appears in multiple layers of config (below) the first found is used:\n\n- process environment values prefixed with `SNYN_`\n- process arguments\n- a `config.local.json` file in the root of your module\n- a `config.default.json` file in the root of your module\n\n## Example\n\n### config.local.json\n\n```json\n{\n  \"from\": \"file\"\n}\n```\n\n### app.js\n\n```js\n// as we're in the same directory as the config.local.json, there's no arg\nvar config = require('@snyk/config')();\nconsole.log(config);\n```\n\n### cli\n\n```shell\n$ SNYK_from=cli node app.js\n=> { from: \"cli\" }\n```\n\n## Notes\n\n* Values read from the environment or from the process arguments will *always* be strings. This is important to differentiate from values parsed in the config files as these can be `boolean` or `numbers`.\n* Environment property names strip *off* the preceding `SNYK_` string, so `SNYK_foo = 10` becomes `foo = \"10\"`\n* To create a nested object structure from the environment values, use two underscores: `SNYK__foo__bar = 10` becomes `foo = { bar: \"10\" }`",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Snyk/config/issues"
  },
  "_id": "snyk-config@1.0.1",
  "dist": {
    "shasum": "450c0046c03f8d7b4fc489968a609452cd33a1d2"
  },
  "_from": "snyk-config@1.0.1",
  "_resolved": "https://registry.npmjs.org/snyk-config/-/snyk-config-1.0.1.tgz"
}
